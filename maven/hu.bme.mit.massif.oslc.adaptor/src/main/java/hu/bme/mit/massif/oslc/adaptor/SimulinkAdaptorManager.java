/*******************************************************************************
 * Copyright (c) 2011, 2012 IBM Corporation and others.
 *
 *  All rights reserved. This program and the accompanying materials
 *  are made available under the terms of the Eclipse Public License v1.0
 *  and Eclipse Distribution License v. 1.0 which accompanies this distribution.
 *
 *  The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html
 *  and the Eclipse Distribution License is available at
 *  http://www.eclipse.org/org/documents/edl-v10.php.
 *
 *  Contributors:
 *
 *	   Sam Padgett	       - initial API and implementation
 *     Michael Fiedler     - adapted for OSLC4J
 *     Jad El-khoury        - initial implementation of code generator (https://bugs.eclipse.org/bugs/show_bug.cgi?id=422448)
 *
 * This file is generated by org.eclipse.lyo.oslc4j.codegenerator
 *******************************************************************************/

package hu.bme.mit.massif.oslc.adaptor;

import hu.bme.mit.massif.communication.ICommandEvaluator;
import hu.bme.mit.massif.communication.command.MatlabCommandFactory;
import hu.bme.mit.massif.communication.commandevaluation.CommandEvaluatorImpl;
import hu.bme.mit.massif.communication.datatype.CellMatlabData;
import hu.bme.mit.massif.communication.datatype.IVisitableMatlabData;
import hu.bme.mit.massif.communication.datatype.MatlabString;
import hu.bme.mit.massif.oslc.adaptor.resources.BlockResource;
import hu.bme.mit.massif.oslc.adaptor.resources.BusCreatorResource;
import hu.bme.mit.massif.oslc.adaptor.resources.BusSelectorResource;
import hu.bme.mit.massif.oslc.adaptor.resources.BusSpecificationResource;
import hu.bme.mit.massif.oslc.adaptor.resources.EnableBlockResource;
import hu.bme.mit.massif.oslc.adaptor.resources.EnableResource;
import hu.bme.mit.massif.oslc.adaptor.resources.FromResource;
import hu.bme.mit.massif.oslc.adaptor.resources.GotoResource;
import hu.bme.mit.massif.oslc.adaptor.resources.InPortBlockResource;
import hu.bme.mit.massif.oslc.adaptor.resources.InPortResource;
import hu.bme.mit.massif.oslc.adaptor.resources.OutPortBlockResource;
import hu.bme.mit.massif.oslc.adaptor.resources.OutPortResource;
import hu.bme.mit.massif.oslc.adaptor.resources.PortBlockResource;
import hu.bme.mit.massif.oslc.adaptor.resources.PortResource;
import hu.bme.mit.massif.oslc.adaptor.resources.SimulinkElementResource;
import hu.bme.mit.massif.oslc.adaptor.resources.SimulinkModelResource;
import hu.bme.mit.massif.oslc.adaptor.resources.SubSystemResource;
import hu.bme.mit.massif.oslc.adaptor.resources.TriggerBlockResource;
import hu.bme.mit.massif.oslc.adaptor.resources.TriggerResource;
import hu.bme.mit.massif.oslc.adaptor.resources.factory.ResourceFactory;
import hu.bme.mit.massif.oslc.adaptor.resources.factory.ResourceFactory.Type;
import hu.bme.mit.massif.oslc.adaptor.servlet.ServiceProviderCatalogSingleton;
import hu.bme.mit.massif.oslc.adaptor.util.AdaptorProperties;
import hu.bme.mit.massif.oslc.adaptor.util.FormatLogger;
import hu.bme.mit.massif.oslc.adaptor.util.Timer;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.ServletContextEvent;
import javax.servlet.http.HttpServletRequest;

import org.eclipse.lyo.oslc4j.core.model.ServiceProvider;

import br.com.embraer.massif.commandevaluation.client.MatlabClient;
import br.com.embraer.massif.commandevaluation.exception.MatlabRMIException;

// Start of user code imports
// End of user code

// Start of user code pre_class_code
// End of user code

public class SimulinkAdaptorManager {

    // Start of user code class_attributes
    private static MatlabCommandFactory commandFactory;
    private static FormatLogger         LOGGER = FormatLogger.getLogger(SimulinkAdaptorManager.class.getName());

    // End of user code

    // Start of user code class_methods
    // End of user code

    public static void contextInitializeServletListener(final ServletContextEvent servletContextEvent) {
        // Establish connection to data backbone etc ...
        // Start of user code contextInitializeServletListener
        LOGGER.debug("Initializing context");
        MatlabClient matlabClient = null;
        try {            
            int port = AdaptorProperties.matlabServicePort;
            String serviceName = AdaptorProperties.matlabServiceName;
            
            LOGGER.info("Trying to connect to matlab server at %s:%s", serviceName, port);
            matlabClient = new MatlabClient("127.0.0.1", port, serviceName);
            LOGGER.info("Connection successful");
        } catch (final MatlabRMIException e) {
            LOGGER.error("Error connecting to matlab server.", e);
        }
        final ICommandEvaluator ce = new CommandEvaluatorImpl(matlabClient);
        commandFactory = new MatlabCommandFactory(ce);
        LOGGER.debug("Context initialized");
        // End of user code
    }

    public static void contextDestroyServletListener(final ServletContextEvent servletContextEvent) {
        // Shutdown connections to data backbone etc...
        // Start of user code contextDestroyed
        LOGGER.debug("Context destroyed");
        // End of user code
    }

    public static ServiceProviderInfo[] getServiceProviderInfos(final HttpServletRequest httpServletRequest) {
        ServiceProviderInfo[] serviceProviderInfos = {};
        // Start of user code (MUST_FILL_IN) getServiceProviderInfos userCode
        LOGGER.debug("Collecting service provider infos");
        Timer timer = Timer.startNew();

        final List<ServiceProviderInfo> infos = new ArrayList<>();
        final List<IVisitableMatlabData> systems = CellMatlabData.getCellMatlabDataData(commandFactory.findSystem()
                .addParam("searchdepth").addParam(0.0).execute());
        systems.stream().map(MatlabString::getMatlabStringData).forEach(system -> {
            final ServiceProviderInfo serviceProviderInfo = new ServiceProviderInfo();
            serviceProviderInfo.name = system;
            serviceProviderInfo.serviceProviderId = system + "Id";
            infos.add(serviceProviderInfo);
        });

        serviceProviderInfos = infos.toArray(new ServiceProviderInfo[infos.size()]);

        LOGGER.debug("Collected service provider infos in: %s", timer);
        // End of user code
        return serviceProviderInfos;
    }

    public static BlockResource getBlockResource(final HttpServletRequest httpServletRequest,
            final String serviceProviderId, final String blockRes) {
        BlockResource aBlockResource = null;
        // Start of user code (MUST_FILL_IN) getBlockResource userCode
        LOGGER.debug("Searching for block with id %s in %s", blockRes, serviceProviderId);
        Timer timer = Timer.startNew();
        
        aBlockResource = ResourceFactory.build(commandFactory, blockRes, serviceProviderId, Type.Block);
        
        LOGGER.debug("Block found in: %s", timer);
        // End of user code
        return aBlockResource;
    }

    public static List<BlockResource> getBlockResources(final HttpServletRequest httpServletRequest,
            final String serviceProviderId, final int page, final int limit) {
        List<BlockResource> blockResources = null;
        // Start of user code (MUST_FILL_IN) getBlockResources userCode
        LOGGER.debug("Collecting blocks in %s", serviceProviderId);
        Timer timer = Timer.startNew();
        
        blockResources = ResourceFactory.collect(commandFactory, serviceProviderId, Type.Block, page, limit);
        
        LOGGER.debug("Collected block in: %s", timer);
        // End of user code
        return blockResources;
    }

    public static List<BlockResource> searchBlockResources(final HttpServletRequest httpServletRequest,
            final String serviceProviderId, final String terms) {
        final List<BlockResource> blockResources = null;
        // Start of user code (MUST_FILL_IN) searchBlockResources userCode
        // End of user code
        return blockResources;
    }

    public static BlockResource createBlockResource(final HttpServletRequest httpServletRequest,
            final BlockResource aBlockResource, final String serviceProviderId) {
        final BlockResource newBlockResource = null;
        // Start of user code (MUST_FILL_IN) createBlockResource userCode
        // End of user code
        return newBlockResource;
    }

    public static String getETagFromBlockResource(final BlockResource aBlockResource) {
        final String eTag = null;
        // Start of user code (MUST_FILL_IN) getETagFromBlockResource userCode
        // End of user code
        return eTag;
    }

    public static ServiceProvider getBlockResourcesManagingServiceProvider(final HttpServletRequest httpServletRequest,
            final BlockResource aBlockResource, final String serviceProviderId, final String blockRes) {
        ServiceProvider aServiceProvider = null;
        // aServiceProvider can be deduced automatically, since the resource's
        // id is relative to that of its serviceProvider.
        aServiceProvider = ServiceProviderCatalogSingleton.getServiceProvider(httpServletRequest, serviceProviderId);
        // Start of user code (MUST_FILL_IN)
        // getBlockResourcesManagingServiceProvider userCode
        // End of user code
        return aServiceProvider;
    }

    public static BusCreatorResource getBusCreatorResource(final HttpServletRequest httpServletRequest,
            final String serviceProviderId, final String busCreatorId) {
        BusCreatorResource aBusCreatorResource = null;
        // Start of user code (MUST_FILL_IN) getBusCreatorResource userCode
        aBusCreatorResource = ResourceFactory.build(commandFactory, busCreatorId, serviceProviderId, Type.BusCreator);
        // End of user code
        return aBusCreatorResource;
    }

    public static List<BusCreatorResource> getBusCreatorResources(final HttpServletRequest httpServletRequest,
            final String serviceProviderId, final int page, final int limit) {
        List<BusCreatorResource> busCreatorResources = null;
        // Start of user code (MUST_FILL_IN) getBusCreatorResources userCode
        busCreatorResources = ResourceFactory.collect(commandFactory, serviceProviderId, Type.BusCreator, page, limit);
        // End of user code
        return busCreatorResources;
    }

    public static List<BusCreatorResource> searchBusCreatorResources(final HttpServletRequest httpServletRequest,
            final String serviceProviderId, final String terms) {
        final List<BusCreatorResource> busCreatorResources = null;
        // Start of user code (MUST_FILL_IN) searchBusCreatorResources userCode
        // End of user code
        return busCreatorResources;
    }

    public static BusCreatorResource createBusCreatorResource(final HttpServletRequest httpServletRequest,
            final BusCreatorResource aBusCreatorResource, final String serviceProviderId) {
        final BusCreatorResource newBusCreatorResource = null;
        // Start of user code (MUST_FILL_IN) createBusCreatorResource userCode
        // End of user code
        return newBusCreatorResource;
    }

    public static String getETagFromBusCreatorResource(final BusCreatorResource aBusCreatorResource) {
        final String eTag = null;
        // Start of user code (MUST_FILL_IN) getETagFromBusCreatorResource
        // userCode
        // End of user code
        return eTag;
    }

    public static ServiceProvider getBusCreatorResourcesManagingServiceProvider(
            final HttpServletRequest httpServletRequest, final BusCreatorResource aBusCreatorResource,
            final String serviceProviderId, final String busCreatorId) {
        ServiceProvider aServiceProvider = null;
        // aServiceProvider can be deduced automatically, since the resource's
        // id is relative to that of its serviceProvider.
        aServiceProvider = ServiceProviderCatalogSingleton.getServiceProvider(httpServletRequest, serviceProviderId);
        // Start of user code (MUST_FILL_IN)
        // getBusCreatorResourcesManagingServiceProvider userCode
        // End of user code
        return aServiceProvider;
    }

    public static BusSelectorResource getBusSelectorResource(final HttpServletRequest httpServletRequest,
            final String serviceProviderId, final String busSelectorId) {
        BusSelectorResource aBusSelectorResource = null;
        // Start of user code (MUST_FILL_IN) getBusSelectorResource userCode
        aBusSelectorResource = ResourceFactory
                .build(commandFactory, busSelectorId, serviceProviderId, Type.BusSelector);
        // End of user code
        return aBusSelectorResource;
    }

    public static List<BusSelectorResource> getBusSelectorResources(final HttpServletRequest httpServletRequest,
            final String serviceProviderId, final int page, final int limit) {
        List<BusSelectorResource> busSelectorResources = null;
        // Start of user code (MUST_FILL_IN) getBusSelectorResources userCode
        busSelectorResources = ResourceFactory
                .collect(commandFactory, serviceProviderId, Type.BusSelector, page, limit);
        // End of user code
        return busSelectorResources;
    }

    public static List<BusSelectorResource> searchBusSelectorResources(final HttpServletRequest httpServletRequest,
            final String serviceProviderId, final String terms) {
        final List<BusSelectorResource> busSelectorResources = null;
        // Start of user code (MUST_FILL_IN) searchBusSelectorResources userCode
        // End of user code
        return busSelectorResources;
    }

    public static BusSelectorResource createBusSelectorResource(final HttpServletRequest httpServletRequest,
            final BusSelectorResource aBusSelectorResource, final String serviceProviderId) {
        final BusSelectorResource newBusSelectorResource = null;
        // Start of user code (MUST_FILL_IN) createBusSelectorResource userCode
        // End of user code
        return newBusSelectorResource;
    }

    public static String getETagFromBusSelectorResource(final BusSelectorResource aBusSelectorResource) {
        final String eTag = null;
        // Start of user code (MUST_FILL_IN) getETagFromBusSelectorResource
        // userCode
        // End of user code
        return eTag;
    }

    public static ServiceProvider getBusSelectorResourcesManagingServiceProvider(
            final HttpServletRequest httpServletRequest, final BusSelectorResource aBusSelectorResource,
            final String serviceProviderId, final String busSelectorId) {
        ServiceProvider aServiceProvider = null;
        // aServiceProvider can be deduced automatically, since the resource's
        // id is relative to that of its serviceProvider.
        aServiceProvider = ServiceProviderCatalogSingleton.getServiceProvider(httpServletRequest, serviceProviderId);
        // Start of user code (MUST_FILL_IN)
        // getBusSelectorResourcesManagingServiceProvider userCode
        // End of user code
        return aServiceProvider;
    }

    public static BusSpecificationResource getBusSpecificationResource(final HttpServletRequest httpServletRequest,
            final String serviceProviderId, final String busSpecId) {
        BusSpecificationResource aBusSpecificationResource = null;
        // Start of user code (MUST_FILL_IN) getBusSpecificationResource
        // userCode
        aBusSpecificationResource = ResourceFactory.build(commandFactory, busSpecId, serviceProviderId,
                Type.BusSpecification);
        // End of user code
        return aBusSpecificationResource;
    }

    public static List<BusSpecificationResource> getBusSpecificationResources(
            final HttpServletRequest httpServletRequest, final String serviceProviderId, final int page, final int limit) {
        List<BusSpecificationResource> busSpecificationResources = null;
        // Start of user code (MUST_FILL_IN) getBusSpecificationResources
        // userCode
        busSpecificationResources = ResourceFactory.collect(commandFactory, serviceProviderId, Type.BusSpecification,
                page, limit);
        // End of user code
        return busSpecificationResources;
    }

    public static List<BusSpecificationResource> searchBusSpecificationResources(
            final HttpServletRequest httpServletRequest, final String serviceProviderId, final String terms) {
        final List<BusSpecificationResource> busSpecificationResources = null;
        // Start of user code (MUST_FILL_IN) searchBusSpecificationResources
        // userCode
        // End of user code
        return busSpecificationResources;
    }

    public static BusSpecificationResource createBusSpecificationResource(final HttpServletRequest httpServletRequest,
            final BusSpecificationResource aBusSpecificationResource, final String serviceProviderId) {
        final BusSpecificationResource newBusSpecificationResource = null;
        // Start of user code (MUST_FILL_IN) createBusSpecificationResource
        // userCode
        // End of user code
        return newBusSpecificationResource;
    }

    public static String getETagFromBusSpecificationResource(final BusSpecificationResource aBusSpecificationResource) {
        final String eTag = null;
        // Start of user code (MUST_FILL_IN) getETagFromBusSpecificationResource
        // userCode
        // End of user code
        return eTag;
    }

    public static ServiceProvider getBusSpecificationResourcesManagingServiceProvider(
            final HttpServletRequest httpServletRequest, final BusSpecificationResource aBusSpecificationResource,
            final String serviceProviderId, final String busSpecId) {
        ServiceProvider aServiceProvider = null;
        // aServiceProvider can be deduced automatically, since the resource's
        // id is relative to that of its serviceProvider.
        aServiceProvider = ServiceProviderCatalogSingleton.getServiceProvider(httpServletRequest, serviceProviderId);
        // Start of user code (MUST_FILL_IN)
        // getBusSpecificationResourcesManagingServiceProvider userCode
        // End of user code
        return aServiceProvider;
    }

    public static EnableBlockResource getEnableBlockResource(final HttpServletRequest httpServletRequest,
            final String serviceProviderId, final String enableBlock) {
        EnableBlockResource aEnableBlockResource = null;
        // Start of user code (MUST_FILL_IN) getEnableBlockResource userCode
        aEnableBlockResource = ResourceFactory.build(commandFactory, enableBlock, serviceProviderId, Type.EnableBlock);
        // End of user code
        return aEnableBlockResource;
    }

    public static List<EnableBlockResource> getEnableBlockResources(final HttpServletRequest httpServletRequest,
            final String serviceProviderId, final int page, final int limit) {
        List<EnableBlockResource> enableBlockResources = null;
        // Start of user code (MUST_FILL_IN) getEnableBlockResources userCode
        enableBlockResources = ResourceFactory
                .collect(commandFactory, serviceProviderId, Type.EnableBlock, page, limit);
        // End of user code
        return enableBlockResources;
    }

    public static List<EnableBlockResource> searchEnableBlockResources(final HttpServletRequest httpServletRequest,
            final String serviceProviderId, final String terms) {
        final List<EnableBlockResource> enableBlockResources = null;
        // Start of user code (MUST_FILL_IN) searchEnableBlockResources userCode
        // End of user code
        return enableBlockResources;
    }

    public static EnableBlockResource createEnableBlockResource(final HttpServletRequest httpServletRequest,
            final EnableBlockResource aEnableBlockResource, final String serviceProviderId) {
        final EnableBlockResource newEnableBlockResource = null;
        // Start of user code (MUST_FILL_IN) createEnableBlockResource userCode
        // End of user code
        return newEnableBlockResource;
    }

    public static String getETagFromEnableBlockResource(final EnableBlockResource aEnableBlockResource) {
        final String eTag = null;
        // Start of user code (MUST_FILL_IN) getETagFromEnableBlockResource
        // userCode
        // End of user code
        return eTag;
    }

    public static ServiceProvider getEnableBlockResourcesManagingServiceProvider(
            final HttpServletRequest httpServletRequest, final EnableBlockResource aEnableBlockResource,
            final String serviceProviderId, final String enableBlock) {
        ServiceProvider aServiceProvider = null;
        // aServiceProvider can be deduced automatically, since the resource's
        // id is relative to that of its serviceProvider.
        aServiceProvider = ServiceProviderCatalogSingleton.getServiceProvider(httpServletRequest, serviceProviderId);
        // Start of user code (MUST_FILL_IN)
        // getEnableBlockResourcesManagingServiceProvider userCode
        // End of user code
        return aServiceProvider;
    }

    public static EnableResource getEnableResource(final HttpServletRequest httpServletRequest,
            final String serviceProviderId, final String enable) {
        EnableResource aEnableResource = null;
        // Start of user code (MUST_FILL_IN) getEnableResource userCode
        aEnableResource = ResourceFactory.build(commandFactory, enable, serviceProviderId, Type.Enable);
        // End of user code
        return aEnableResource;
    }

    public static List<EnableResource> getEnableResources(final HttpServletRequest httpServletRequest,
            final String serviceProviderId, final int page, final int limit) {
        List<EnableResource> enableResources = null;
        // Start of user code (MUST_FILL_IN) getEnableResources userCode
        enableResources = ResourceFactory.collect(commandFactory, serviceProviderId, Type.Enable, page, limit);
        // End of user code
        return enableResources;
    }

    public static List<EnableResource> searchEnableResources(final HttpServletRequest httpServletRequest,
            final String serviceProviderId, final String terms) {
        final List<EnableResource> enableResources = null;
        // Start of user code (MUST_FILL_IN) searchEnableResources userCode
        // End of user code
        return enableResources;
    }

    public static EnableResource createEnableResource(final HttpServletRequest httpServletRequest,
            final EnableResource aEnableResource, final String serviceProviderId) {
        final EnableResource newEnableResource = null;
        // Start of user code (MUST_FILL_IN) createEnableResource userCode
        // End of user code
        return newEnableResource;
    }

    public static String getETagFromEnableResource(final EnableResource aEnableResource) {
        final String eTag = null;
        // Start of user code (MUST_FILL_IN) getETagFromEnableResource userCode
        // End of user code
        return eTag;
    }

    public static ServiceProvider getEnableResourcesManagingServiceProvider(
            final HttpServletRequest httpServletRequest, final EnableResource aEnableResource,
            final String serviceProviderId, final String enable) {
        ServiceProvider aServiceProvider = null;
        // aServiceProvider can be deduced automatically, since the resource's
        // id is relative to that of its serviceProvider.
        aServiceProvider = ServiceProviderCatalogSingleton.getServiceProvider(httpServletRequest, serviceProviderId);
        // Start of user code (MUST_FILL_IN)
        // getEnableResourcesManagingServiceProvider userCode
        // End of user code
        return aServiceProvider;
    }

    public static FromResource getFromResource(final HttpServletRequest httpServletRequest,
            final String serviceProviderId, final String from) {
        FromResource aFromResource = null;
        // Start of user code (MUST_FILL_IN) getFromResource userCode
        aFromResource = ResourceFactory.build(commandFactory, from, serviceProviderId, Type.From);
        // End of user code
        return aFromResource;
    }

    public static List<FromResource> getFromResources(final HttpServletRequest httpServletRequest,
            final String serviceProviderId, final int page, final int limit) {
        List<FromResource> fromResources = null;
        // Start of user code (MUST_FILL_IN) getFromResources userCode
        fromResources = ResourceFactory.collect(commandFactory, serviceProviderId, Type.From, page, limit);
        // End of user code
        return fromResources;
    }

    public static List<FromResource> searchFromResources(final HttpServletRequest httpServletRequest,
            final String serviceProviderId, final String terms) {
        final List<FromResource> fromResources = null;
        // Start of user code (MUST_FILL_IN) searchFromResources userCode
        // End of user code
        return fromResources;
    }

    public static FromResource createFromResource(final HttpServletRequest httpServletRequest,
            final FromResource aFromResource, final String serviceProviderId) {
        final FromResource newFromResource = null;
        // Start of user code (MUST_FILL_IN) createFromResource userCode
        // End of user code
        return newFromResource;
    }

    public static String getETagFromFromResource(final FromResource aFromResource) {
        final String eTag = null;
        // Start of user code (MUST_FILL_IN) getETagFromFromResource userCode
        // End of user code
        return eTag;
    }

    public static ServiceProvider getFromResourcesManagingServiceProvider(final HttpServletRequest httpServletRequest,
            final FromResource aFromResource, final String serviceProviderId, final String from) {
        ServiceProvider aServiceProvider = null;
        // aServiceProvider can be deduced automatically, since the resource's
        // id is relative to that of its serviceProvider.
        aServiceProvider = ServiceProviderCatalogSingleton.getServiceProvider(httpServletRequest, serviceProviderId);
        // Start of user code (MUST_FILL_IN)
        // getFromResourcesManagingServiceProvider userCode
        // End of user code
        return aServiceProvider;
    }

    public static GotoResource getGotoResource(final HttpServletRequest httpServletRequest,
            final String serviceProviderId, final String gotoRes) {
        GotoResource aGotoResource = null;
        // Start of user code (MUST_FILL_IN) getGotoResource userCode
        aGotoResource = ResourceFactory.build(commandFactory, gotoRes, serviceProviderId, Type.Goto);
        // End of user code
        return aGotoResource;
    }

    public static List<GotoResource> getGotoResources(final HttpServletRequest httpServletRequest,
            final String serviceProviderId, final int page, final int limit) {
        List<GotoResource> gotoResources = null;
        // Start of user code (MUST_FILL_IN) getGotoResources userCode
        gotoResources = ResourceFactory.collect(commandFactory, serviceProviderId, Type.Goto, page, limit);
        // End of user code
        return gotoResources;
    }

    public static List<GotoResource> searchGotoResources(final HttpServletRequest httpServletRequest,
            final String serviceProviderId, final String terms) {
        final List<GotoResource> gotoResources = null;
        // Start of user code (MUST_FILL_IN) searchGotoResources userCode
        // End of user code
        return gotoResources;
    }

    public static GotoResource createGotoResource(final HttpServletRequest httpServletRequest,
            final GotoResource aGotoResource, final String serviceProviderId) {
        final GotoResource newGotoResource = null;
        // Start of user code (MUST_FILL_IN) createGotoResource userCode
        // End of user code
        return newGotoResource;
    }

    public static String getETagFromGotoResource(final GotoResource aGotoResource) {
        final String eTag = null;
        // Start of user code (MUST_FILL_IN) getETagFromGotoResource userCode
        // End of user code
        return eTag;
    }

    public static ServiceProvider getGotoResourcesManagingServiceProvider(final HttpServletRequest httpServletRequest,
            final GotoResource aGotoResource, final String serviceProviderId, final String gotoRes) {
        ServiceProvider aServiceProvider = null;
        // aServiceProvider can be deduced automatically, since the resource's
        // id is relative to that of its serviceProvider.
        aServiceProvider = ServiceProviderCatalogSingleton.getServiceProvider(httpServletRequest, serviceProviderId);
        // Start of user code (MUST_FILL_IN)
        // getGotoResourcesManagingServiceProvider userCode
        // End of user code
        return aServiceProvider;
    }

    public static InPortBlockResource getInPortBlockResource(final HttpServletRequest httpServletRequest,
            final String serviceProviderId, final String outPortBlock) {
        InPortBlockResource aInPortBlockResource = null;
        // Start of user code (MUST_FILL_IN) getInPortBlockResource userCode
        aInPortBlockResource = ResourceFactory.build(commandFactory, outPortBlock, serviceProviderId, Type.InPortBlock);
        // End of user code
        return aInPortBlockResource;
    }

    public static List<InPortBlockResource> getInPortBlockResources(final HttpServletRequest httpServletRequest,
            final String serviceProviderId, final int page, final int limit) {
        List<InPortBlockResource> inPortBlockResources = null;
        // Start of user code (MUST_FILL_IN) getInPortBlockResources userCode
        inPortBlockResources = ResourceFactory
                .collect(commandFactory, serviceProviderId, Type.InPortBlock, page, limit);
        // End of user code
        return inPortBlockResources;
    }

    public static List<InPortBlockResource> searchInPortBlockResources(final HttpServletRequest httpServletRequest,
            final String serviceProviderId, final String terms) {
        final List<InPortBlockResource> inPortBlockResources = null;
        // Start of user code (MUST_FILL_IN) searchInPortBlockResources userCode
        // End of user code
        return inPortBlockResources;
    }

    public static InPortBlockResource createInPortBlockResource(final HttpServletRequest httpServletRequest,
            final InPortBlockResource aInPortBlockResource, final String serviceProviderId) {
        final InPortBlockResource newInPortBlockResource = null;
        // Start of user code (MUST_FILL_IN) createInPortBlockResource userCode
        // End of user code
        return newInPortBlockResource;
    }

    public static String getETagFromInPortBlockResource(final InPortBlockResource aInPortBlockResource) {
        final String eTag = null;
        // Start of user code (MUST_FILL_IN) getETagFromInPortBlockResource
        // userCode
        // End of user code
        return eTag;
    }

    public static ServiceProvider getInPortBlockResourcesManagingServiceProvider(
            final HttpServletRequest httpServletRequest, final InPortBlockResource aInPortBlockResource,
            final String serviceProviderId, final String outPortBlock) {
        ServiceProvider aServiceProvider = null;
        // aServiceProvider can be deduced automatically, since the resource's
        // id is relative to that of its serviceProvider.
        aServiceProvider = ServiceProviderCatalogSingleton.getServiceProvider(httpServletRequest, serviceProviderId);
        // Start of user code (MUST_FILL_IN)
        // getInPortBlockResourcesManagingServiceProvider userCode
        // End of user code
        return aServiceProvider;
    }

    public static InPortResource getInPortResource(final HttpServletRequest httpServletRequest,
            final String serviceProviderId, final String inPRes) {
        InPortResource aInPortResource = null;
        // Start of user code (MUST_FILL_IN) getInPortResource userCode
        aInPortResource = ResourceFactory.build(commandFactory, inPRes, serviceProviderId, Type.InPort);
        // End of user code
        return aInPortResource;
    }

    public static List<InPortResource> getInPortResources(final HttpServletRequest httpServletRequest,
            final String serviceProviderId, final int page, final int limit) {
        List<InPortResource> inPortResources = null;
        // Start of user code (MUST_FILL_IN) getInPortResources userCode
        inPortResources = ResourceFactory.collect(commandFactory, serviceProviderId, Type.InPort, page, limit);
        // End of user code
        return inPortResources;
    }

    public static List<InPortResource> searchInPortResources(final HttpServletRequest httpServletRequest,
            final String serviceProviderId, final String terms) {
        final List<InPortResource> inPortResources = null;
        // Start of user code (MUST_FILL_IN) searchInPortResources userCode
        // End of user code
        return inPortResources;
    }

    public static InPortResource createInPortResource(final HttpServletRequest httpServletRequest,
            final InPortResource aInPortResource, final String serviceProviderId) {
        final InPortResource newInPortResource = null;
        // Start of user code (MUST_FILL_IN) createInPortResource userCode
        // End of user code
        return newInPortResource;
    }

    public static String getETagFromInPortResource(final InPortResource aInPortResource) {
        final String eTag = null;
        // Start of user code (MUST_FILL_IN) getETagFromInPortResource userCode
        // End of user code
        return eTag;
    }

    public static ServiceProvider getInPortResourcesManagingServiceProvider(
            final HttpServletRequest httpServletRequest, final InPortResource aInPortResource,
            final String serviceProviderId, final String inPRes) {
        ServiceProvider aServiceProvider = null;
        // aServiceProvider can be deduced automatically, since the resource's
        // id is relative to that of its serviceProvider.
        aServiceProvider = ServiceProviderCatalogSingleton.getServiceProvider(httpServletRequest, serviceProviderId);
        // Start of user code (MUST_FILL_IN)
        // getInPortResourcesManagingServiceProvider userCode
        // End of user code
        return aServiceProvider;
    }

    public static OutPortBlockResource getOutPortBlockResource(final HttpServletRequest httpServletRequest,
            final String serviceProviderId, final String outPort) {
        OutPortBlockResource aOutPortBlockResource = null;
        // Start of user code (MUST_FILL_IN) getOutPortBlockResource userCode
        aOutPortBlockResource = ResourceFactory.build(commandFactory, outPort, serviceProviderId, Type.OutPortBlock);
        // End of user code
        return aOutPortBlockResource;
    }

    public static List<OutPortBlockResource> getOutPortBlockResources(final HttpServletRequest httpServletRequest,
            final String serviceProviderId, final int page, final int limit) {
        List<OutPortBlockResource> outPortBlockResources = null;
        // Start of user code (MUST_FILL_IN) getOutPortBlockResources userCode
        outPortBlockResources = ResourceFactory.collect(commandFactory, serviceProviderId, Type.OutPortBlock, page,
                limit);
        // End of user code
        return outPortBlockResources;
    }

    public static List<OutPortBlockResource> searchOutPortBlockResources(final HttpServletRequest httpServletRequest,
            final String serviceProviderId, final String terms) {
        final List<OutPortBlockResource> outPortBlockResources = null;
        // Start of user code (MUST_FILL_IN) searchOutPortBlockResources
        // userCode
        // End of user code
        return outPortBlockResources;
    }

    public static OutPortBlockResource createOutPortBlockResource(final HttpServletRequest httpServletRequest,
            final OutPortBlockResource aOutPortBlockResource, final String serviceProviderId) {
        final OutPortBlockResource newOutPortBlockResource = null;
        // Start of user code (MUST_FILL_IN) createOutPortBlockResource userCode
        // End of user code
        return newOutPortBlockResource;
    }

    public static String getETagFromOutPortBlockResource(final OutPortBlockResource aOutPortBlockResource) {
        final String eTag = null;
        // Start of user code (MUST_FILL_IN) getETagFromOutPortBlockResource
        // userCode
        // End of user code
        return eTag;
    }

    public static ServiceProvider getOutPortBlockResourcesManagingServiceProvider(
            final HttpServletRequest httpServletRequest, final OutPortBlockResource aOutPortBlockResource,
            final String serviceProviderId, final String outPort) {
        ServiceProvider aServiceProvider = null;
        // aServiceProvider can be deduced automatically, since the resource's
        // id is relative to that of its serviceProvider.
        aServiceProvider = ServiceProviderCatalogSingleton.getServiceProvider(httpServletRequest, serviceProviderId);
        // Start of user code (MUST_FILL_IN)
        // getOutPortBlockResourcesManagingServiceProvider userCode
        // End of user code
        return aServiceProvider;
    }

    public static OutPortResource getOutPortResource(final HttpServletRequest httpServletRequest,
            final String serviceProviderId, final String outPRes) {
        OutPortResource aOutPortResource = null;
        // Start of user code (MUST_FILL_IN) getOutPortResource userCode
        aOutPortResource = ResourceFactory.build(commandFactory, outPRes, serviceProviderId, Type.OutPort);
        // End of user code
        return aOutPortResource;
    }

    public static List<OutPortResource> getOutPortResources(final HttpServletRequest httpServletRequest,
            final String serviceProviderId, final int page, final int limit) {
        List<OutPortResource> outPortResources = null;
        // Start of user code (MUST_FILL_IN) getOutPortResources userCode
        outPortResources = ResourceFactory.collect(commandFactory, serviceProviderId, Type.OutPort, page, limit);
        // End of user code
        return outPortResources;
    }

    public static List<OutPortResource> searchOutPortResources(final HttpServletRequest httpServletRequest,
            final String serviceProviderId, final String terms) {
        final List<OutPortResource> outPortResources = null;
        // Start of user code (MUST_FILL_IN) searchOutPortResources userCode
        // End of user code
        return outPortResources;
    }

    public static OutPortResource createOutPortResource(final HttpServletRequest httpServletRequest,
            final OutPortResource aOutPortResource, final String serviceProviderId) {
        final OutPortResource newOutPortResource = null;
        // Start of user code (MUST_FILL_IN) createOutPortResource userCode
        // End of user code
        return newOutPortResource;
    }

    public static String getETagFromOutPortResource(final OutPortResource aOutPortResource) {
        final String eTag = null;
        // Start of user code (MUST_FILL_IN) getETagFromOutPortResource userCode
        // End of user code
        return eTag;
    }

    public static ServiceProvider getOutPortResourcesManagingServiceProvider(
            final HttpServletRequest httpServletRequest, final OutPortResource aOutPortResource,
            final String serviceProviderId, final String outPRes) {
        ServiceProvider aServiceProvider = null;
        // aServiceProvider can be deduced automatically, since the resource's
        // id is relative to that of its serviceProvider.
        aServiceProvider = ServiceProviderCatalogSingleton.getServiceProvider(httpServletRequest, serviceProviderId);
        // Start of user code (MUST_FILL_IN)
        // getOutPortResourcesManagingServiceProvider userCode
        // End of user code
        return aServiceProvider;
    }

    public static PortBlockResource getPortBlockResource(final HttpServletRequest httpServletRequest,
            final String serviceProviderId, final String portBlock) {
        PortBlockResource aPortBlockResource = null;
        // Start of user code (MUST_FILL_IN) getPortBlockResource userCode
        aPortBlockResource = ResourceFactory.build(commandFactory, portBlock, serviceProviderId, Type.PortBlock);
        // End of user code
        return aPortBlockResource;
    }

    public static List<PortBlockResource> getPortBlockResources(final HttpServletRequest httpServletRequest,
            final String serviceProviderId, final int page, final int limit) {
        List<PortBlockResource> portBlockResources = null;
        // Start of user code (MUST_FILL_IN) getPortBlockResources userCode
        portBlockResources = ResourceFactory.collect(commandFactory, serviceProviderId, Type.PortBlock, page, limit);
        // End of user code
        return portBlockResources;
    }

    public static List<PortBlockResource> searchPortBlockResources(final HttpServletRequest httpServletRequest,
            final String serviceProviderId, final String terms) {
        final List<PortBlockResource> portBlockResources = null;
        // Start of user code (MUST_FILL_IN) searchPortBlockResources userCode
        // End of user code
        return portBlockResources;
    }

    public static PortBlockResource createPortBlockResource(final HttpServletRequest httpServletRequest,
            final PortBlockResource aPortBlockResource, final String serviceProviderId) {
        final PortBlockResource newPortBlockResource = null;
        // Start of user code (MUST_FILL_IN) createPortBlockResource userCode
        // End of user code
        return newPortBlockResource;
    }

    public static String getETagFromPortBlockResource(final PortBlockResource aPortBlockResource) {
        final String eTag = null;
        // Start of user code (MUST_FILL_IN) getETagFromPortBlockResource
        // userCode
        // End of user code
        return eTag;
    }

    public static ServiceProvider getPortBlockResourcesManagingServiceProvider(
            final HttpServletRequest httpServletRequest, final PortBlockResource aPortBlockResource,
            final String serviceProviderId, final String portBlock) {
        ServiceProvider aServiceProvider = null;
        // aServiceProvider can be deduced automatically, since the resource's
        // id is relative to that of its serviceProvider.
        aServiceProvider = ServiceProviderCatalogSingleton.getServiceProvider(httpServletRequest, serviceProviderId);
        // Start of user code (MUST_FILL_IN)
        // getPortBlockResourcesManagingServiceProvider userCode
        // End of user code
        return aServiceProvider;
    }

    public static PortResource getPortResource(final HttpServletRequest httpServletRequest,
            final String serviceProviderId, final String portRes) {
        PortResource aPortResource = null;
        // Start of user code (MUST_FILL_IN) getPortResource userCode
        aPortResource = ResourceFactory.build(commandFactory, portRes, serviceProviderId, Type.Port);
        // End of user code
        return aPortResource;
    }

    public static List<PortResource> getPortResources(final HttpServletRequest httpServletRequest,
            final String serviceProviderId, final int page, final int limit) {
        List<PortResource> portResources = null;
        // Start of user code (MUST_FILL_IN) getPortResources userCode
        portResources = ResourceFactory.collect(commandFactory, serviceProviderId, Type.Port, page, limit);
        // End of user code
        return portResources;
    }

    public static List<PortResource> searchPortResources(final HttpServletRequest httpServletRequest,
            final String serviceProviderId, final String terms) {
        final List<PortResource> portResources = null;
        // Start of user code (MUST_FILL_IN) searchPortResources userCode
        // End of user code
        return portResources;
    }

    public static PortResource createPortResource(final HttpServletRequest httpServletRequest,
            final PortResource aPortResource, final String serviceProviderId) {
        final PortResource newPortResource = null;
        // Start of user code (MUST_FILL_IN) createPortResource userCode
        // End of user code
        return newPortResource;
    }

    public static String getETagFromPortResource(final PortResource aPortResource) {
        final String eTag = null;
        // Start of user code (MUST_FILL_IN) getETagFromPortResource userCode
        // End of user code
        return eTag;
    }

    public static ServiceProvider getPortResourcesManagingServiceProvider(final HttpServletRequest httpServletRequest,
            final PortResource aPortResource, final String serviceProviderId, final String portRes) {
        ServiceProvider aServiceProvider = null;
        // aServiceProvider can be deduced automatically, since the resource's
        // id is relative to that of its serviceProvider.
        aServiceProvider = ServiceProviderCatalogSingleton.getServiceProvider(httpServletRequest, serviceProviderId);
        // Start of user code (MUST_FILL_IN)
        // getPortResourcesManagingServiceProvider userCode
        // End of user code
        return aServiceProvider;
    }

    public static SimulinkElementResource getSimulinkElementResource(final HttpServletRequest httpServletRequest,
            final String serviceProviderId, final String simElem) {
        SimulinkElementResource aSimulinkElementResource = null;
        // Start of user code (MUST_FILL_IN) getSimulinkElementResource userCode
        aSimulinkElementResource = ResourceFactory.build(commandFactory, simElem, serviceProviderId,
                Type.SimulinkElement);
        // End of user code
        return aSimulinkElementResource;
    }

    public static List<SimulinkElementResource> getSimulinkElementResources(
            final HttpServletRequest httpServletRequest, final String serviceProviderId, final int page, final int limit) {
        List<SimulinkElementResource> simulinkElementResources = null;
        // Start of user code (MUST_FILL_IN) getSimulinkElementResources
        // userCode
        simulinkElementResources = ResourceFactory.collect(commandFactory, serviceProviderId, Type.SimulinkElement,
                page, limit);
        // End of user code
        return simulinkElementResources;
    }

    public static List<SimulinkElementResource> searchSimulinkElementResources(
            final HttpServletRequest httpServletRequest, final String serviceProviderId, final String terms) {
        final List<SimulinkElementResource> simulinkElementResources = null;
        // Start of user code (MUST_FILL_IN) searchSimulinkElementResources
        // userCode
        // End of user code
        return simulinkElementResources;
    }

    public static SimulinkElementResource createSimulinkElementResource(final HttpServletRequest httpServletRequest,
            final SimulinkElementResource aSimulinkElementResource, final String serviceProviderId) {
        final SimulinkElementResource newSimulinkElementResource = null;
        // Start of user code (MUST_FILL_IN) createSimulinkElementResource
        // userCode
        // End of user code
        return newSimulinkElementResource;
    }

    public static String getETagFromSimulinkElementResource(final SimulinkElementResource aSimulinkElementResource) {
        final String eTag = null;
        // Start of user code (MUST_FILL_IN) getETagFromSimulinkElementResource
        // userCode
        // End of user code
        return eTag;
    }

    public static ServiceProvider getSimulinkElementResourcesManagingServiceProvider(
            final HttpServletRequest httpServletRequest, final SimulinkElementResource aSimulinkElementResource,
            final String serviceProviderId, final String simElem) {
        ServiceProvider aServiceProvider = null;
        // aServiceProvider can be deduced automatically, since the resource's
        // id is relative to that of its serviceProvider.
        aServiceProvider = ServiceProviderCatalogSingleton.getServiceProvider(httpServletRequest, serviceProviderId);
        // Start of user code (MUST_FILL_IN)
        // getSimulinkElementResourcesManagingServiceProvider userCode
        // End of user code
        return aServiceProvider;
    }

    public static SimulinkModelResource getSimulinkModelResource(final HttpServletRequest httpServletRequest,
            final String simulinkModel) {
        SimulinkModelResource aSimulinkModelResource = null;
        // Start of user code (MUST_FILL_IN) getSimulinkModelResource userCode
        aSimulinkModelResource = ResourceFactory.build(commandFactory, simulinkModel, "", Type.SimulinkModel);
        // End of user code
        return aSimulinkModelResource;
    }

    public static List<SimulinkModelResource> getSimulinkModelResources(final HttpServletRequest httpServletRequest,
            final int page, final int limit) {
        List<SimulinkModelResource> simulinkModelResources = null;
        // Start of user code (MUST_FILL_IN) getSimulinkModelResources userCode
        simulinkModelResources = ResourceFactory.collect(commandFactory, "", Type.SimulinkModel, page, limit);
        // End of user code
        return simulinkModelResources;
    }

    public static List<SimulinkModelResource> searchSimulinkModelResources(final HttpServletRequest httpServletRequest,
            final String terms) {
        final List<SimulinkModelResource> simulinkModelResources = null;
        // Start of user code (MUST_FILL_IN) searchSimulinkModelResources
        // userCode
        // End of user code
        return simulinkModelResources;
    }

    public static SimulinkModelResource createSimulinkModelResource(final HttpServletRequest httpServletRequest,
            final SimulinkModelResource aSimulinkModelResource) {
        final SimulinkModelResource newSimulinkModelResource = null;
        // Start of user code (MUST_FILL_IN) createSimulinkModelResource
        // userCode
        // End of user code
        return newSimulinkModelResource;
    }

    public static String getETagFromSimulinkModelResource(final SimulinkModelResource aSimulinkModelResource) {
        final String eTag = null;
        // Start of user code (MUST_FILL_IN) getETagFromSimulinkModelResource
        // userCode
        // End of user code
        return eTag;
    }

    public static ServiceProvider getSimulinkModelResourcesManagingServiceProvider(
            final HttpServletRequest httpServletRequest, final SimulinkModelResource aSimulinkModelResource,
            final String simulinkModel) {
        final ServiceProvider aServiceProvider = null;
        // Start of user code (MUST_FILL_IN)
        // getSimulinkModelResourcesManagingServiceProvider userCode
        // End of user code
        return aServiceProvider;
    }

    public static SubSystemResource getSubSystemResource(final HttpServletRequest httpServletRequest,
            final String serviceProviderId, final String subSystem) {
        SubSystemResource aSubSystemResource = null;
        // Start of user code (MUST_FILL_IN) getSubSystemResource userCode
        aSubSystemResource = ResourceFactory.build(commandFactory, subSystem, serviceProviderId, Type.SubSystem);
        // End of user code
        return aSubSystemResource;
    }

    public static List<SubSystemResource> getSubSystemResources(final HttpServletRequest httpServletRequest,
            final String serviceProviderId, final int page, final int limit) {
        List<SubSystemResource> subSystemResources = null;
        // Start of user code (MUST_FILL_IN) getSubSystemResources userCode
        subSystemResources = ResourceFactory.collect(commandFactory, serviceProviderId, Type.SubSystem, page, limit);
        // End of user code
        return subSystemResources;
    }

    public static List<SubSystemResource> searchSubSystemResources(final HttpServletRequest httpServletRequest,
            final String serviceProviderId, final String terms) {
        final List<SubSystemResource> subSystemResources = null;
        // Start of user code (MUST_FILL_IN) searchSubSystemResources userCode
        // End of user code
        return subSystemResources;
    }

    public static SubSystemResource createSubSystemResource(final HttpServletRequest httpServletRequest,
            final SubSystemResource aSubSystemResource, final String serviceProviderId) {
        final SubSystemResource newSubSystemResource = null;
        // Start of user code (MUST_FILL_IN) createSubSystemResource userCode
        // End of user code
        return newSubSystemResource;
    }

    public static String getETagFromSubSystemResource(final SubSystemResource aSubSystemResource) {
        final String eTag = null;
        // Start of user code (MUST_FILL_IN) getETagFromSubSystemResource
        // userCode
        // End of user code
        return eTag;
    }

    public static ServiceProvider getSubSystemResourcesManagingServiceProvider(
            final HttpServletRequest httpServletRequest, final SubSystemResource aSubSystemResource,
            final String serviceProviderId, final String subSystem) {
        ServiceProvider aServiceProvider = null;
        // aServiceProvider can be deduced automatically, since the resource's
        // id is relative to that of its serviceProvider.
        aServiceProvider = ServiceProviderCatalogSingleton.getServiceProvider(httpServletRequest, serviceProviderId);
        // Start of user code (MUST_FILL_IN)
        // getSubSystemResourcesManagingServiceProvider userCode
        // End of user code
        return aServiceProvider;
    }

    public static TriggerBlockResource getTriggerBlockResource(final HttpServletRequest httpServletRequest,
            final String serviceProviderId, final String triggerBlock) {
        TriggerBlockResource aTriggerBlockResource = null;
        // Start of user code (MUST_FILL_IN) getTriggerBlockResource userCode
        aTriggerBlockResource = ResourceFactory.build(commandFactory, triggerBlock, serviceProviderId,
                Type.TriggerBlock);
        // End of user code
        return aTriggerBlockResource;
    }

    public static List<TriggerBlockResource> getTriggerBlockResources(final HttpServletRequest httpServletRequest,
            final String serviceProviderId, final int page, final int limit) {
        List<TriggerBlockResource> triggerBlockResources = null;
        // Start of user code (MUST_FILL_IN) getTriggerBlockResources userCode
        triggerBlockResources = ResourceFactory.collect(commandFactory, serviceProviderId, Type.TriggerBlock, page,
                limit);
        // End of user code
        return triggerBlockResources;
    }

    public static List<TriggerBlockResource> searchTriggerBlockResources(final HttpServletRequest httpServletRequest,
            final String serviceProviderId, final String terms) {
        final List<TriggerBlockResource> triggerBlockResources = null;
        // Start of user code (MUST_FILL_IN) searchTriggerBlockResources
        // userCode
        // End of user code
        return triggerBlockResources;
    }

    public static TriggerBlockResource createTriggerBlockResource(final HttpServletRequest httpServletRequest,
            final TriggerBlockResource aTriggerBlockResource, final String serviceProviderId) {
        final TriggerBlockResource newTriggerBlockResource = null;
        // Start of user code (MUST_FILL_IN) createTriggerBlockResource userCode
        // End of user code
        return newTriggerBlockResource;
    }

    public static String getETagFromTriggerBlockResource(final TriggerBlockResource aTriggerBlockResource) {
        final String eTag = null;
        // Start of user code (MUST_FILL_IN) getETagFromTriggerBlockResource
        // userCode
        // End of user code
        return eTag;
    }

    public static ServiceProvider getTriggerBlockResourcesManagingServiceProvider(
            final HttpServletRequest httpServletRequest, final TriggerBlockResource aTriggerBlockResource,
            final String serviceProviderId, final String triggerBlock) {
        ServiceProvider aServiceProvider = null;
        // aServiceProvider can be deduced automatically, since the resource's
        // id is relative to that of its serviceProvider.
        aServiceProvider = ServiceProviderCatalogSingleton.getServiceProvider(httpServletRequest, serviceProviderId);
        // Start of user code (MUST_FILL_IN)
        // getTriggerBlockResourcesManagingServiceProvider userCode
        // End of user code
        return aServiceProvider;
    }

    public static TriggerResource getTriggerResource(final HttpServletRequest httpServletRequest,
            final String serviceProviderId, final String trigger) {
        TriggerResource aTriggerResource = null;
        // Start of user code (MUST_FILL_IN) getTriggerResource userCode
        aTriggerResource = ResourceFactory.build(commandFactory, trigger, serviceProviderId, Type.Trigger);
        // End of user code
        return aTriggerResource;
    }

    public static List<TriggerResource> getTriggerResources(final HttpServletRequest httpServletRequest,
            final String serviceProviderId, final int page, final int limit) {
        List<TriggerResource> triggerResources = null;
        // Start of user code (MUST_FILL_IN) getTriggerResources userCode
        triggerResources = ResourceFactory.collect(commandFactory, serviceProviderId, Type.Trigger, page, limit);
        // End of user code
        return triggerResources;
    }

    public static List<TriggerResource> searchTriggerResources(final HttpServletRequest httpServletRequest,
            final String serviceProviderId, final String terms) {
        final List<TriggerResource> triggerResources = null;
        // Start of user code (MUST_FILL_IN) searchTriggerResources userCode
        // End of user code
        return triggerResources;
    }

    public static TriggerResource createTriggerResource(final HttpServletRequest httpServletRequest,
            final TriggerResource aTriggerResource, final String serviceProviderId) {
        final TriggerResource newTriggerResource = null;
        // Start of user code (MUST_FILL_IN) createTriggerResource userCode
        // End of user code
        return newTriggerResource;
    }

    public static String getETagFromTriggerResource(final TriggerResource aTriggerResource) {
        final String eTag = null;
        // Start of user code (MUST_FILL_IN) getETagFromTriggerResource userCode
        // End of user code
        return eTag;
    }

    public static ServiceProvider getTriggerResourcesManagingServiceProvider(
            final HttpServletRequest httpServletRequest, final TriggerResource aTriggerResource,
            final String serviceProviderId, final String trigger) {
        ServiceProvider aServiceProvider = null;
        // aServiceProvider can be deduced automatically, since the resource's
        // id is relative to that of its serviceProvider.
        aServiceProvider = ServiceProviderCatalogSingleton.getServiceProvider(httpServletRequest, serviceProviderId);
        // Start of user code (MUST_FILL_IN)
        // getTriggerResourcesManagingServiceProvider userCode
        // End of user code
        return aServiceProvider;
    }

}
