/*******************************************************************************
 * Copyright (c) 2012, 2014 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *
 *     Russell Boykin       - initial API and implementation
 *     Alberto Giammaria    - initial API and implementation
 *     Chris Peters         - initial API and implementation
 *     Gianluca Bernardini  - initial API and implementation
 *     Michael Fiedler      - Bugzilla adapter implementation
 *     Jad El-khoury        - initial implementation of code generator (https://bugs.eclipse.org/bugs/show_bug.cgi?id=422448)
 *
 * This file is generated by org.eclipse.lyo.oslc4j.codegenerator
 *******************************************************************************/
package hu.bme.mit.massif.oslc.adaptor.servlet;

import hu.bme.mit.massif.oslc.adaptor.SimulinkAdaptorConstants;
import hu.bme.mit.massif.oslc.adaptor.services.BlockResourceService;
import hu.bme.mit.massif.oslc.adaptor.services.BusCreatorResourceService;
import hu.bme.mit.massif.oslc.adaptor.services.BusSelectorResourceService;
import hu.bme.mit.massif.oslc.adaptor.services.BusSpecificationResourceService;
import hu.bme.mit.massif.oslc.adaptor.services.EnableBlockResourceService;
import hu.bme.mit.massif.oslc.adaptor.services.EnableResourceService;
import hu.bme.mit.massif.oslc.adaptor.services.FromResourceService;
import hu.bme.mit.massif.oslc.adaptor.services.GotoResourceService;
import hu.bme.mit.massif.oslc.adaptor.services.InPortBlockResourceService;
import hu.bme.mit.massif.oslc.adaptor.services.InPortResourceService;
import hu.bme.mit.massif.oslc.adaptor.services.OutPortBlockResourceService;
import hu.bme.mit.massif.oslc.adaptor.services.OutPortResourceService;
import hu.bme.mit.massif.oslc.adaptor.services.PortBlockResourceService;
import hu.bme.mit.massif.oslc.adaptor.services.PortResourceService;
import hu.bme.mit.massif.oslc.adaptor.services.SimulinkElementResourceService;
import hu.bme.mit.massif.oslc.adaptor.services.SimulinkModelResourceService;
import hu.bme.mit.massif.oslc.adaptor.services.SubSystemResourceService;
import hu.bme.mit.massif.oslc.adaptor.services.TriggerBlockResourceService;
import hu.bme.mit.massif.oslc.adaptor.services.TriggerResourceService;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.Map;

import org.eclipse.lyo.oslc4j.client.ServiceProviderRegistryURIs;
import org.eclipse.lyo.oslc4j.core.exception.OslcCoreApplicationException;
import org.eclipse.lyo.oslc4j.core.model.OslcConstants;
import org.eclipse.lyo.oslc4j.core.model.PrefixDefinition;
import org.eclipse.lyo.oslc4j.core.model.Publisher;
import org.eclipse.lyo.oslc4j.core.model.ServiceProvider;
import org.eclipse.lyo.oslc4j.core.model.ServiceProviderFactory;

// Start of user code imports
// End of user code

public class SimulinkAdaptorServiceProviderFactory {
    private static Class<?>[] RESOURCE_CLASSES = { BlockResourceService.class, BusCreatorResourceService.class,
            BusSelectorResourceService.class, BusSpecificationResourceService.class, EnableBlockResourceService.class,
            EnableResourceService.class, FromResourceService.class, GotoResourceService.class,
            InPortBlockResourceService.class, InPortResourceService.class, OutPortBlockResourceService.class,
            OutPortResourceService.class, PortBlockResourceService.class, PortResourceService.class,
            SimulinkElementResourceService.class, SimulinkModelResourceService.class, SubSystemResourceService.class,
            TriggerBlockResourceService.class, TriggerResourceService.class };

    private SimulinkAdaptorServiceProviderFactory() {
        super();
    }

    /**
     * Create ï¿½a new Bugzilla OSLC change management service provider.
     *
     * @param baseURI
     * @param serviceProviderTitle
     * @param parameterValueMap
     *            - a map containing the path replacement value for
     *            {serviceProviderId}. See
     *            ServiceProviderCatalogSingleton.initServiceProviders()
     * @return
     * @throws OslcCoreApplicationException
     * @throws URISyntaxException
     */
    public static ServiceProvider createServiceProvider(final String baseURI, final String title,
            final String description, final Publisher publisher, final Map<String, Object> parameterValueMap)
            throws OslcCoreApplicationException, URISyntaxException {
        final ServiceProvider serviceProvider = ServiceProviderFactory.createServiceProvider(baseURI,
                ServiceProviderRegistryURIs.getUIURI(), title, description, publisher, RESOURCE_CLASSES,
                parameterValueMap);
        URI detailsURIs[] = { new URI(baseURI) };
        serviceProvider.setDetails(detailsURIs);

        final PrefixDefinition[] prefixDefinitions = {
                new PrefixDefinition(OslcConstants.DCTERMS_NAMESPACE_PREFIX, new URI(OslcConstants.DCTERMS_NAMESPACE)),
                new PrefixDefinition(OslcConstants.OSLC_CORE_NAMESPACE_PREFIX, new URI(
                        OslcConstants.OSLC_CORE_NAMESPACE)),
                new PrefixDefinition(OslcConstants.OSLC_DATA_NAMESPACE_PREFIX, new URI(
                        OslcConstants.OSLC_DATA_NAMESPACE)),
                new PrefixDefinition(OslcConstants.RDF_NAMESPACE_PREFIX, new URI(OslcConstants.RDF_NAMESPACE)),
                new PrefixDefinition(OslcConstants.RDFS_NAMESPACE_PREFIX, new URI(OslcConstants.RDFS_NAMESPACE)),
                new PrefixDefinition(SimulinkAdaptorConstants.SIMULINK_NAMSPACE_PREFIX, new URI(
                        SimulinkAdaptorConstants.SIMULINK_NAMSPACE)) };

        serviceProvider.setPrefixDefinitions(prefixDefinitions);

        return serviceProvider;
    }
}
