package hu.bme.mit.transima.models.simulink.derived

import "platform:/resource/hu.bme.mit.transima.metamodels/model/simulink/simulink.ecore"
import hu.bme.mit.transima.models.simulink.util.referenceEqual
  
@QueryBasedFeature//(feature = "inports", kind = "many", source = Block, target = InPort)
pattern inports(Block : Block, InPort : InPort) = {
	Block.ports(Block,InPort);
}

@QueryBasedFeature
pattern outports(Block: Block, OutPort : OutPort) = {
	Block.ports(Block,OutPort);
}

@QueryBasedFeature
pattern trigger(Block: Block, Trigger : Trigger) = {
	Block.ports(Block,Trigger);
}

@QueryBasedFeature
pattern enabler(Block: Block, Enabler : Enable) = {
	Block.ports(Block,Enabler);
}

@QueryBasedFeature
pattern name(SE : SimulinkElement, Name) = {
	SimulinkElement.simulinkRef(SE,SR);
	SimulinkReference.name(SR,Name);
}

@QueryBasedFeature
pattern sourceBlock(This : Block, Source : Block) = {
	Block.sourceBlockRef(This,SrcRef);
	Block.simulinkRef(Source,SR);
	
	find referenceEqual(SrcRef, SR);
}

pattern hasSourceBlock(Bl) {
	Block.sourceBlock(Bl, _Src);
}

//@Constraint(severity = "warning", location = Block,
//  message = "Source block $BlRef$ not found for $Block$"
//)
pattern sourceBlockNotFound(Block, BlRef) {
	Block.sourceBlockRef(Block, BlRef);
	neg find hasSourceBlock(Block);
}
@QueryBasedFeature
pattern referencedModel(This : ModelReference, Target : SimulinkModel) = {
	ModelReference.modelRef(This,ModelRef);
	SimulinkModel.simulinkRef(Target,SR);
	find referenceEqual(ModelRef,SR);
}
